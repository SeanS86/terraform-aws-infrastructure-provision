name: 'Terraform CI/CD'

on:
  workflow_dispatch:
    inputs:
      action_type:
        description: 'Action to perform (plan or apply)'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply

permissions:
  contents: read

jobs:
  terraform-on-ec2:
    name: 'Terraform ${{ github.event.inputs.action_type }} on tools_ec2'
    runs-on: ubuntu-latest

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4

      - name: 'Determine Branch Name'
        id: get_branch
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          echo "Operating on branch: $BRANCH_NAME"
          echo "branch_name_out=$BRANCH_NAME" >> $GITHUB_OUTPUT
        shell: bash

      - name: 'Set up SSH Key'
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.ID_RSA }}

      - name: 'Create known_hosts'
        run: |
          mkdir -p ~/.ssh
          touch ~/.ssh/known_hosts
          echo "${{ secrets.EC2_HOST_KEY }}" >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: 'Sync Terraform code to tools_ec2'
        id: sync
        run: |
          EC2_USER_VAL="${{ secrets.EC2_USER }}"
          EC2_HOST_VAL="${{ secrets.EC2_HOST }}"
          CURRENT_BRANCH="${{ steps.get_branch.outputs.branch_name_out }}" # Use determined branch

          if [ -z "$CURRENT_BRANCH" ]; then
            echo "::error::Could not determine branch name."
            exit 1
          fi
          if [ -z "$EC2_USER_VAL" ]; then
            echo "::error::EC2_USER secret is not set or empty."
            exit 1
          fi
          if [ -z "$EC2_HOST_VAL" ]; then
            echo "::error::EC2_HOST secret is not set or empty."
            exit 1
          fi

          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          RUN_ID="${{ github.run_id }}"
          BRANCH_NAME_SLUG=$(echo "$CURRENT_BRANCH" | sed 's/[^a-zA-Z0-9]/-/g')
          REMOTE_BASE_PATH="/home/${EC2_USER_VAL}/terraform_runs"
          REMOTE_PROJECT_PATH="${REMOTE_BASE_PATH}/${REPO_NAME}/${BRANCH_NAME_SLUG}/${RUN_ID}"

          echo "Job Name will use branch: $CURRENT_BRANCH"
          echo "Remote project path will be: ${REMOTE_PROJECT_PATH}"
          echo "remote_project_path_out=${REMOTE_PROJECT_PATH}" >> $GITHUB_OUTPUT
          echo "branch_name_slug_out=${BRANCH_NAME_SLUG}" >> $GITHUB_OUTPUT # Pass determined slug
          echo "run_id_out=${RUN_ID}" >> $GITHUB_OUTPUT

          ssh -o StrictHostKeyChecking=yes \
            "${EC2_USER_VAL}@${EC2_HOST_VAL}" "mkdir -p ${REMOTE_PROJECT_PATH}"

          rsync -avz -e "ssh -o StrictHostKeyChecking=yes" \
            ./ "${EC2_USER_VAL}@${EC2_HOST_VAL}:${REMOTE_PROJECT_PATH}/"

      - name: 'Run Terraform Init, Validate, Plan on tools_ec2'
        id: plan
        run: |
          EC2_USER_VAL="${{ secrets.EC2_USER }}"
          EC2_HOST_VAL="${{ secrets.EC2_HOST }}"
          # Use the branch slug from the sync step's output
          BRANCH_NAME_SLUG_FROM_SYNC="${{ steps.sync.outputs.branch_name_slug_out }}"

          if [ -z "$BRANCH_NAME_SLUG_FROM_SYNC" ] || [ -z "$EC2_USER_VAL" ] || [ -z "$EC2_HOST_VAL" ]; then
            echo "::error::Critical variables (branch slug, EC2 user, or EC2 host) are missing in plan step."
            exit 1
          fi

          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          RUN_ID="${{ github.run_id }}"
          # Use the slug passed from the sync step
          REMOTE_PROJECT_PATH="/home/${EC2_USER_VAL}/terraform_runs/${REPO_NAME}/${BRANCH_NAME_SLUG_FROM_SYNC}/${RUN_ID}"
          TERRAFORM_DIR_IN_REPO="."

          SSH_COMMANDS="
          set -e
          cd ${REMOTE_PROJECT_PATH}/${TERRAFORM_DIR_IN_REPO} && \
          echo 'Running Terraform Init...' && \
          terraform init -input=false -no-color && \
          echo 'Running Terraform Validate...' && \
          terraform validate -no-color && \
          echo 'Running Terraform Plan...' && \
          terraform plan -input=false -no-color -out=tfplan
          "
          echo "Attempting to run Terraform plan commands on tools_ec2..."
          ssh -o StrictHostKeyChecking=yes \
            "${EC2_USER_VAL}@${EC2_HOST_VAL}" "${SSH_COMMANDS}" > plan_output.txt

          echo "--- Terraform Plan Output from EC2 ---"
          cat plan_output.txt
          echo "--- End of Terraform Plan Output ---"

          PLAN_SUMMARY=$(cat plan_output.txt)
          echo "plan_summary_env<<EOF" >> $GITHUB_ENV
          echo "${PLAN_SUMMARY}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          if ssh -o StrictHostKeyChecking=yes "${EC2_USER_VAL}@${EC2_HOST_VAL}" "[ -f ${REMOTE_PROJECT_PATH}/${TERRAFORM_DIR_IN_REPO}/tfplan ]"; then
            echo "tfplan_exists=true" >> $GITHUB_OUTPUT
          else
            echo "tfplan_exists=false" >> $GITHUB_OUTPUT
            echo "::error::Terraform plan file (tfplan) was not created on EC2."
          fi

      - name: 'Display Plan Summary'
        if: always() && env.plan_summary_env
        run: |
          echo "Terraform Plan Summary (from EC2):"
          echo "${{ env.plan_summary_env }}"

      - name: 'Run Terraform Apply on tools_ec2'
        if: github.event.inputs.action_type == 'apply' && steps.plan.outcome == 'success' && steps.plan.outputs.tfplan_exists == 'true'
        run: |
          EC2_USER_VAL="${{ secrets.EC2_USER }}"
          EC2_HOST_VAL="${{ secrets.EC2_HOST }}"
          # Use the branch slug from the sync step's output
          BRANCH_NAME_SLUG_FROM_SYNC="${{ steps.sync.outputs.branch_name_slug_out }}"

          if [ -z "$BRANCH_NAME_SLUG_FROM_SYNC" ] || [ -z "$EC2_USER_VAL" ] || [ -z "$EC2_HOST_VAL" ]; then
            echo "::error::Critical variables (branch slug, EC2 user, or EC2 host) are missing in apply step."
            exit 1
          fi

          echo "User selected 'apply'. Proceeding to Terraform Apply for branch: (determined as default)"
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          RUN_ID="${{ github.run_id }}"
          REMOTE_PROJECT_PATH="/home/${EC2_USER_VAL}/terraform_runs/${REPO_NAME}/${BRANCH_NAME_SLUG_FROM_SYNC}/${RUN_ID}"
          TERRAFORM_DIR_IN_REPO="."

          echo "Attempting to apply Terraform configuration on tools_ec2 using the generated tfplan..."
          ssh -o StrictHostKeyChecking=yes \
            "${EC2_USER_VAL}@${EC2_HOST_VAL}" "cd ${REMOTE_PROJECT_PATH}/${TERRAFORM_DIR_IN_REPO} && terraform apply -input=false -auto-approve tfplan"
          echo "Terraform Apply command sent."

      - name: 'Clean up synced code on tools_ec2'
        if: always()
        run: |
          EC2_USER_VAL="${{ secrets.EC2_USER }}"
          EC2_HOST_VAL="${{ secrets.EC2_HOST }}"
          # Use the branch slug from the sync step's output if available, otherwise cleanup might be broader or fail
          BRANCH_NAME_SLUG_FROM_SYNC="${{ steps.sync.outputs.branch_name_slug_out }}"

          if [ -z "$BRANCH_NAME_SLUG_FROM_SYNC" ] || [ -z "$EC2_USER_VAL" ] || [ -z "$EC2_HOST_VAL" ]; then
            echo "::warning::Skipping cleanup as critical variables (branch slug, EC2 user, or EC2 host) are missing."
            exit 0
          fi

          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          RUN_ID="${{ github.run_id }}"
          REMOTE_PROJECT_PATH="/home/${EC2_USER_VAL}/terraform_runs/${REPO_NAME}/${BRANCH_NAME_SLUG_FROM_SYNC}/${RUN_ID}"

          echo "Cleaning up remote directory: ${REMOTE_PROJECT_PATH}"
          ssh -o StrictHostKeyChecking=yes \
            "${EC2_USER_VAL}@${EC2_HOST_VAL}" "if [ -d ${REMOTE_PROJECT_PATH} ]; then rm -rf ${REMOTE_PROJECT_PATH}; echo 'Cleanup successful.'; else echo 'Remote directory not found, skipping cleanup.'; fi"
          echo "Cleanup process finished."
